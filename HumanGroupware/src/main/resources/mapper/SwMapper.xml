<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-/mybatis.org/DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.human.springboot.dao.SwDAO">
    <!-- <select id="boardList" resultType="com.human.springboot.dto.SwBoardDTO">
      select a.board_id, b.emp_name, a.board_title, a.board_content, 
              a.board_created, a.board_updated, a.board_hit
      from board a, employee b
      where board_category = #{param1} and a.board_writer = b.emp_no
      order by a.board_id
    </select> -->
    <select id="boardList" resultType="com.human.springboot.dto.SwBoardDTO">
      select *
      from
          (
          select rownum as row_num, sub.*
          from
              (
              select a.*, c.emp_name
              from board a, board_category b, employee c
              where a.board_category = b.category_id 
                    and a.board_writer = c.emp_no
                    and b.category_name = #{param1}
              <choose>
                <when test='param4.equals("title") and !param5.equals("all")'>
                    and a.board_title like '%'||#{param5}||'%'
                </when>
                <when test='param4.equals("content") and !param5.equals("all")'>
                    and a.board_content like '%'||#{param5}||'%'
                </when>
                <when test='param4.equals("writer") and !param5.equals("all")'>
                    and c.emp_name like '%'||#{param5}||'%'
                </when>
              </choose>
              order by board_id desc
              ) sub
    <![CDATA[
          where rownum <= #{param2} * #{param3} 
          )
      where row_num > (#{param2} - 1) * #{param3}
    ]]>
    </select>
    <insert id="boardInsert">
      <choose>
        <when test='param1 == 1'>
          insert into board(board_id, board_category, board_writer, board_title, 
                        board_content, board_created, board_updated, notice_no, 
                        board_file_name, board_file_path)
          values(board_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4},
                to_char(sysdate, 'YYYY-MM-DD'), to_char(sysdate, 'YYYY-MM-DD'), 
                board_notice_seq.nextval, #{param5, jdbcType=VARCHAR}, #{param6, jdbcType=VARCHAR})

        </when>
        <otherwise>
          insert into board(board_id, board_category, board_writer, board_title, 
                        board_content, board_created, board_updated, free_no,
                        board_file_name, board_file_path)
          values(board_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4},
                to_char(sysdate, 'YYYY-MM-DD'), to_char(sysdate, 'YYYY-MM-DD'),
                board_free_seq.nextval, #{param5, jdbcType=VARCHAR}, #{param6, jdbcType=VARCHAR})
        </otherwise>                   
      </choose>
    </insert>
    <select id="boardView" resultType="com.human.springboot.dto.SwBoardDTO">
      select a.*, b.emp_name, c.category_name
      from board a, employee b, board_category c
      where a.board_id = #{param1} and a.board_writer = b.emp_no 
            and a.board_category = c.category_id
    </select>
    <update id="boardHit">
      update board
      set board_hit = board_hit + 1
      where board_id = #{param1}
    </update>
    <select id="boardCount" resultType="int">
      select count(a.board_id)
      from board a, board_category b, employee c
      where a.board_category = b.category_id
            and a.board_writer = c.emp_no
            and b.category_name = #{param1}
      <choose>
        <when test='param2.equals("title") and !param3.equals("all")'>
            and a.board_title like '%'||#{param3}||'%'
        </when>
        <when test='param2.equals("content") and !param3.equals("all")'>
            and a.board_content like '%'||#{param3}||'%'
        </when>
        <when test='param2.equals("writer") and !param3.equals("all")'>
            and c.emp_name like '%'||#{param3}||'%'
        </when>
      </choose>
    </select>
    <delete id="boardDelete">
      delete board
      where board_id = #{param1}
    </delete>
    <update id="boardUpdate">
      update board
      set board_title = #{param2}, board_content = #{param3}, 
          board_updated = to_char(sysdate, 'YYYY-MM-DD')
      <if test='param4 != null and param5 != null'>
          , board_file_name = #{param4},
          board_file_path = #{param5}
      </if>
      where board_id = #{param1}
    </update>
    <select id="boardCommentCount" resultType="int">
      select count(*)
      from board_comment
      where board_id = #{param1}
    </select>
    <select id="boardFile" resultType="com.human.springboot.dto.SwBoardDTO">
      select board_file_name, board_file_path
      from board
      where board_id = #{param1}
    </select>
    <select id="boardFileCheck" resultType="boolean">
      select nvl2(board_file_path, 1, 0)
      from board
      where board_id = #{param1}
    </select>
    <insert id="addComment">
      insert into board_comment
      values(comment_seq.nextval, #{param1}, #{param2}, #{param3}, 
              to_char(sysdate, 'YYYY-MM-DD'))
    </insert>
    <delete id="deleteComment">
      delete board_comment
      where comment_no = #{param1}
    </delete>
    <delete id="deleteAllComment">
      delete board_comment
      where board_id = #{param1}
    </delete>
    <select id="commentList" resultType="com.human.springboot.dto.SwCommentDTO">
      select a.*, b.emp_name
      from board_comment a, employee b
      where a.writer = b.emp_no and board_id = #{param1}
      order by a.comment_no
    </select>
    <select id="userCheck" resultType="boolean">
      select decode(count(emp_id), 1, 1, 0, 0)
      from employee
      where emp_id = #{param1} and emp_password = #{param2}
    </select>
    <select id="getUserInfo" resultType="com.human.springboot.dto.SwEmpDTO">
      select a.emp_no, a.emp_id, a.emp_name,a.board_authority, b.dep_name, c.position_name
      from employee a, department b, position c
      where a.emp_depart = b.dep_id and a.emp_position = c.position_id 
            and a.emp_id = #{param1}
    </select>
    <select id="empList" resultType="com.human.springboot.dto.SwEmpDTO">
      select a.emp_no, a.emp_name, c.position_name, b.dep_name
      from employee a, department b, position c 
      where a.emp_depart = b.dep_id and a.emp_position = c.position_id
      order by a.emp_position desc
    </select>
    <insert id="edmsSend">
      insert into edms(edms_id, edms_drafter, edms_mid_approver, 
                        edms_fnl_approver, edms_title, edms_category, edms_ref)
      values(edms_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4}, #{param5}, #{param6})
    </insert>
    <insert id="edmsLeave">
      <selectKey resultType="int" keyProperty="edms_id" order="BEFORE">
        select edms_seq.currval as edms_id from dual
      </selectKey>
      insert into edms_leave
      values(edms_leave_seq.nextval, #{edms_id}, #{param1}, #{param2}, #{param3}, #{param4}, #{param5})
    </insert>
    <select id="edmsList" resultType="com.human.springboot.dto.SwEdmsDTO">
      select a.edms_id, a.edms_category, a.edms_title, b.emp_name, c.dep_name,
            a.edms_date, a.edms_status, a.edms_ref, a.edms_drafter, 
            a.edms_mid_approver, a.edms_fnl_approver
      from edms a, employee b, department c
      where a.edms_drafter = b.emp_no and b.emp_depart = c.dep_id and not a.edms_status = '반려'
      <choose>
        <when test='param1.equals("leave")'>
          and a.edms_category = '휴가'
        </when>
        <when test='param1.equals("loa")'>
          and a.edms_category = '품의'
        </when>
      </choose>
      order by a.edms_id desc
    </select>
    <select id="edmsRejectList" resultType="com.human.springboot.dto.SwEdmsDTO">
      select a.edms_id, a.edms_category, a.edms_title, b.emp_name, c.dep_name,a.edms_date, a.edms_status
      from edms a, employee b, department c
      where a.edms_drafter = b.emp_no and b.emp_depart = c.dep_id 
            and a.edms_status = '반려' and a.edms_drafter = #{param1}
      <choose>
        <when test='param2.equals("leave")'>
          and a.edms_category = '휴가'
        </when>
        <when test='param2.equals("loa")'>
          and a.edms_category = '품의'
        </when>
      </choose>
      order by a.edms_id desc
    </select>
    <select id="getEmpName" resultType="String">
      select emp_name
      from employee
      where emp_no = #{param1}
    </select>
    <select id="findEdms" resultType="com.human.springboot.dto.SwEdmsDTO">
      select a.*, b.emp_name, d.position_name, c.dep_name
      from edms a, employee b, department c, position d
      where a.edms_drafter = b.emp_no and b.emp_depart = c.dep_id 
            and b.emp_position = d.position_id and a.edms_id = #{param1}
    </select>
    <select id="edmsLeaveView" resultType="com.human.springboot.dto.SwEdmsDTO">
      select *
      from edms_leave
      where edms_id = #{param1}
    </select>
    <select id="edmsLoaView" resultType="com.human.springboot.dto.SwEdmsDTO">
      select *
      from edms_loa
      where edms_id = #{param1}
    </select>
    <insert id="edmsLoa">
      insert into edms_loa
      values(edms_loa_seq.nextval, edms_seq.currval, #{param1}, #{param2})
    </insert>
    <update id="edmsApprovalReject">
      <selectKey resultType="int" keyProperty="approver" order="BEFORE">
        select count(*) as approver
        from edms
        where edms_id = #{param1} and edms_mid_approver = #{param2}
      </selectKey>
      <choose>
        <when test='approver == 1'>
          update edms
          set edms_status = #{param3}, edms_mid_chk = 'y', edms_reason = #{param4}
          where edms_id = #{param1} and edms_mid_approver = #{param2}
        </when>
        <when test='approver == 0'>
          update edms
          set edms_status = #{param3}, edms_fnl_chk = 'y', edms_reason = #{param4}
          where edms_id = #{param1} and edms_fnl_approver = #{param2}
        </when>
      </choose>
    </update>
    <update id="edmsApprovalConfirm">
      <selectKey resultType="int" keyProperty="approver" order="BEFORE">
        select count(*) as approver
        from edms
        where edms_id = #{param1} and edms_mid_approver = #{param2}
      </selectKey>
      <choose>
        <when test='approver == 1'>
          update edms
          set edms_mid_chk = 'y'
          where edms_id = #{param1} and edms_mid_approver = #{param2}
        </when>
        <when test='approver == 0'>
          update edms
          set edms_status = #{param3}, edms_fnl_chk = 'y'
          where edms_id = #{param1} and edms_fnl_approver = #{param2}
        </when>
      </choose>
    </update>
    <select id="getRefInfo" resultType="com.human.springboot.dto.SwEmpDTO">
      select a.emp_no, a.emp_id, a.emp_name,a.board_authority, b.dep_name, c.position_name
      from employee a, department b, position c
      where a.emp_depart = b.dep_id and a.emp_position = c.position_id 
            and a.emp_no = #{param1}
    </select>
    <select id="getTaskPeriod" resultType="com.human.springboot.dto.task.selectTaskDTO">
      select task_started, task_limit
      from task
      where task_performer = #{param1}
    </select>
</mapper>